# Ex. of a ansible.cfg file can be found here -> https://github.com/ansible/ansible/blob/devel/examples/ansible.cfg

[defaults]
# disable host_key_checking
# https://docs.ansible.com/ansible/latest/user_guide/connection_details.html#host-key-checking
# This is added, so manage simu, connections to servers.
forks = 30
host_key_checking = False
gather_facts = False
roles_path = roles/

# When true, you can retry the failed servers with out running on thoes that worked. Se more here -> https://docs.ansible.com/ansible/latest/reference_appendices/config.html#retry-files-enabled and https://stackoverflow.com/questions/72514818/ansible-rerun-playbook-on-failed-hosts/72518242#72518242
#RETRY_FILES_ENABLED = true
# The path to the .retry file
#RETRY_FILES_SAVE_PATH = ~/ansible/

inventory=Inventory
# inventory=inventory_file # use -i or env var ANSIBLE_INVENTORY to override
# FYI `vagrant ssh-config` is a great guide for configuring ansible to connect directly to VMs created by vagrant
# inventory=inventory_file # use -i or env var ANSIBLE_INVENTORY to override

# Use the YAML callback plugin.
stdout_callback = yaml
# Use the stdout_callback when running ad-hoc commands.
bin_ansible_callbacks = True

[privilege_escalation]
become = True
become_user = root
become_method = sudo
become_ask_pass = true


[ssh_connection]
# ssh arguments to use
# Leaving off ControlPersist will result in poor performance, so use
# paramiko on older platforms rather than removing it, -C controls compression use
#ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s
#ssh_args = -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no

# The base directory for the ControlPath sockets.
# This is the "%(directory)s" in the control_path option
#
# Example:
# control_path_dir = /tmp/.ansible/cp
#control_path_dir = ~/.ansible/cp

# The path to use for the ControlPath sockets. This defaults to a hashed string of the hostname,
# port and username (empty string in the config). The hash mitigates a common problem users
# found with long hostnames and the conventional %(directory)s/ansible-ssh-%%h-%%p-%%r format.
# In those cases, a "too long for Unix domain socket" ssh error would occur.
#
# Example:
# control_path = %(directory)s/%%C
#control_path =

# Enabling pipelining reduces the number of SSH operations required to
# execute a module on the remote server. This can result in a significant
# performance improvement when enabled, however when using "sudo:" you must
# first disable 'requiretty' in /etc/sudoers
#
# By default, this option is disabled to preserve compatibility with
# sudoers configurations that have requiretty (the default on many distros).
#
#pipelining = False

# Control the mechanism for transferring files (old)
#   * smart = try sftp and then try scp [default]
#   * True = use scp only
#   * False = use sftp only
#scp_if_ssh = smart

# Control the mechanism for transferring files (new)
# If set, this will override the scp_if_ssh option
#   * sftp  = use sftp to transfer files
#   * scp   = use scp to transfer files
#   * piped = use 'dd' over SSH to transfer files
#   * smart = try sftp, scp, and piped, in that order [default]
#transfer_method = smart

# If False, sftp will not use batch mode to transfer files. This may cause some
# types of file transfer failures impossible to catch however, and should
# only be disabled if your sftp version has problems with batch mode
#sftp_batch_mode = False

# The -tt argument is passed to ssh when pipelining is not enabled because sudo
# requires a tty by default.
#usetty = True

# Number of times to retry an SSH connection to a host, in case of UNREACHABLE.
# For each retry attempt, there is an exponential backoff,
# so after the first attempt there is 1s wait, then 2s, 4s etc. up to 30s (max).
#retries = 3
